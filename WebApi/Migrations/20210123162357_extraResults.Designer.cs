// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApi.Models;

namespace WebApi.Migrations
{
    [DbContext(typeof(SchoolKitContext))]
    [Migration("20210123162357_extraResults")]
    partial class extraResults
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebApi.Models.AnnualEnrollment", b =>
                {
                    b.Property<int>("AnnualEnrollmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassSubjectID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FirstTerm")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Grade")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SecondTerm")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TermID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ThirdTerm")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnnualEnrollmentID");

                    b.HasIndex("ClassSubjectID");

                    b.HasIndex("StudentID");

                    b.HasIndex("TermID");

                    b.ToTable("AnnualEnrollments");
                });

            modelBuilder.Entity("WebApi.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LgaID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LgaID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");
                });

            modelBuilder.Entity("WebApi.Models.ClassArm", b =>
                {
                    b.Property<int>("ClassArmID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Arm")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Class")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClassArmID");

                    b.ToTable("ClassArms");
                });

            modelBuilder.Entity("WebApi.Models.ClassSubject", b =>
                {
                    b.Property<int>("ClassSubjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassArmID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SubjectID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isCompulsory")
                        .HasColumnType("INTEGER");

                    b.HasKey("ClassSubjectID");

                    b.HasIndex("ClassArmID");

                    b.HasIndex("SubjectID");

                    b.ToTable("ClassSubjects");
                });

            modelBuilder.Entity("WebApi.Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CA")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassSubjectID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CompletionState")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Exam")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Grade")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TermID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.HasKey("EnrollmentID");

                    b.HasIndex("ClassSubjectID");

                    b.HasIndex("StudentID");

                    b.HasIndex("TermID");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("WebApi.Models.LGA", b =>
                {
                    b.Property<int>("LgaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("StateID")
                        .HasColumnType("INTEGER");

                    b.HasKey("LgaID");

                    b.HasIndex("StateID");

                    b.ToTable("LGAs");
                });

            modelBuilder.Entity("WebApi.Models.Option", b =>
                {
                    b.Property<int>("OptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Correct")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Opt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("QuestionID")
                        .HasColumnType("INTEGER");

                    b.HasKey("OptionID");

                    b.HasIndex("QuestionID");

                    b.ToTable("Options");
                });

            modelBuilder.Entity("WebApi.Models.PrincipalQualification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("PrincipalID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Qlf")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("PrincipalID");

                    b.ToTable("PrincipalQualifications");
                });

            modelBuilder.Entity("WebApi.Models.QAttempt", b =>
                {
                    b.Property<int>("QuestionAttemptID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OptSeed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TestAttemptID")
                        .HasColumnType("INTEGER");

                    b.HasKey("QuestionAttemptID");

                    b.HasIndex("QuestionID");

                    b.HasIndex("TestAttemptID");

                    b.ToTable("QuestionAttempts");
                });

            modelBuilder.Entity("WebApi.Models.QAttemptsOption", b =>
                {
                    b.Property<int>("QAttemptsOptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("OptionID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionAttemptID")
                        .HasColumnType("INTEGER");

                    b.HasKey("QAttemptsOptionID");

                    b.HasIndex("OptionID");

                    b.HasIndex("QuestionAttemptID");

                    b.ToTable("QAttemptsOptions");
                });

            modelBuilder.Entity("WebApi.Models.Question", b =>
                {
                    b.Property<int>("QuestionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllOptionsCorrect")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CorrectOptions")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Mark")
                        .HasColumnType("REAL");

                    b.Property<int>("QType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Qn")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TestID")
                        .HasColumnType("INTEGER");

                    b.HasKey("QuestionID");

                    b.HasIndex("TestID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("WebApi.Models.Result", b =>
                {
                    b.Property<int>("ResultID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Average")
                        .HasColumnType("REAL");

                    b.Property<double>("ClassAverage")
                        .HasColumnType("REAL");

                    b.Property<int>("ClassPosition")
                        .HasColumnType("INTEGER");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TermID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Total")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("ResultID");

                    b.HasIndex("StudentID");

                    b.HasIndex("TermID");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("WebApi.Models.ResultRecord", b =>
                {
                    b.Property<int>("ResultRecordID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassArmID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SchoolID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TermID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ResultRecordID");

                    b.HasIndex("ClassArmID");

                    b.HasIndex("SchoolID");

                    b.HasIndex("TermID");

                    b.ToTable("ResultRecords");
                });

            modelBuilder.Entity("WebApi.Models.SSCompulsory", b =>
                {
                    b.Property<int>("SSCompulsoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SchoolID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectID")
                        .HasColumnType("INTEGER");

                    b.HasKey("SSCompulsoryID");

                    b.HasIndex("SchoolID");

                    b.HasIndex("SubjectID");

                    b.ToTable("SSCompulsories");
                });

            modelBuilder.Entity("WebApi.Models.SSDrop", b =>
                {
                    b.Property<int>("SSDropID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SchoolID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SubjectID")
                        .HasColumnType("INTEGER");

                    b.HasKey("SSDropID");

                    b.HasIndex("SchoolID");

                    b.HasIndex("SubjectID");

                    b.ToTable("SSDrops");
                });

            modelBuilder.Entity("WebApi.Models.School", b =>
                {
                    b.Property<int>("SchoolID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("AdminID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Append")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("LgaID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RegNoCount")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SessionStart")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowPositon")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeachersCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("SchoolID");

                    b.HasIndex("AdminID");

                    b.HasIndex("LgaID");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("WebApi.Models.SchoolRegCode", b =>
                {
                    b.Property<int>("CodeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CodeId");

                    b.ToTable("SchoolRegCodes");
                });

            modelBuilder.Entity("WebApi.Models.State", b =>
                {
                    b.Property<int>("StateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("StateID");

                    b.ToTable("States");
                });

            modelBuilder.Entity("WebApi.Models.StudentCode", b =>
                {
                    b.Property<int>("CodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassArmID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("SchoolID")
                        .HasColumnType("INTEGER");

                    b.HasKey("CodeID");

                    b.ToTable("StudentCodes");
                });

            modelBuilder.Entity("WebApi.Models.Subject", b =>
                {
                    b.Property<int>("SubjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Range")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("SchoolSpecific")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SubjectID");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("WebApi.Models.TeacherCode", b =>
                {
                    b.Property<int>("CodeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("SchoolID")
                        .HasColumnType("INTEGER");

                    b.HasKey("CodeID");

                    b.ToTable("TeacherCodes");
                });

            modelBuilder.Entity("WebApi.Models.TeacherQualification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Qlf")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TeacherID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.HasIndex("TeacherID");

                    b.ToTable("TeacherQualifications");
                });

            modelBuilder.Entity("WebApi.Models.TeacherSubject", b =>
                {
                    b.Property<int>("TeacherSubjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassSubjectID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TeacherID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TeacherSubjectID");

                    b.HasIndex("ClassSubjectID");

                    b.HasIndex("TeacherID");

                    b.ToTable("TeacherSubjects");
                });

            modelBuilder.Entity("WebApi.Models.Term", b =>
                {
                    b.Property<int>("TermID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Current")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Label")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SchoolID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SessionEnd")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SessionStart")
                        .HasColumnType("TEXT");

                    b.HasKey("TermID");

                    b.HasIndex("SchoolID");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("WebApi.Models.Test", b =>
                {
                    b.Property<int>("TestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ClassSubjectID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CloseDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Closed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Minutes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QNPS")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SchoolID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TermID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("TestID");

                    b.HasIndex("ClassSubjectID");

                    b.HasIndex("SchoolID");

                    b.HasIndex("TermID");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("WebApi.Models.TestAttempt", b =>
                {
                    b.Property<int>("AttemptID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Finished")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Score")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("StudentID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TestID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TimeSpent")
                        .HasColumnType("INTEGER");

                    b.HasKey("AttemptID");

                    b.HasIndex("StudentID");

                    b.HasIndex("TestID");

                    b.ToTable("TestAttempts");
                });

            modelBuilder.Entity("WebApi.Models.Admin", b =>
                {
                    b.HasBaseType("WebApi.Models.ApplicationUser");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("WebApi.Models.Principal", b =>
                {
                    b.HasBaseType("WebApi.Models.ApplicationUser");

                    b.Property<int>("SchoolID")
                        .HasColumnType("INTEGER");

                    b.HasIndex("SchoolID");

                    b.HasDiscriminator().HasValue("Principal");
                });

            modelBuilder.Entity("WebApi.Models.Student", b =>
                {
                    b.HasBaseType("WebApi.Models.ApplicationUser");

                    b.Property<int>("ClassArmID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<bool>("HasGraduated")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RegNo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("SchoolID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Student_SchoolID");

                    b.HasIndex("ClassArmID");

                    b.HasIndex("SchoolID");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("WebApi.Models.Teacher", b =>
                {
                    b.HasBaseType("WebApi.Models.ApplicationUser");

                    b.Property<int>("SchoolID")
                        .HasColumnType("INTEGER")
                        .HasColumnName("Teacher_SchoolID");

                    b.HasIndex("SchoolID");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApi.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApi.Models.AnnualEnrollment", b =>
                {
                    b.HasOne("WebApi.Models.ClassSubject", "ClassSubject")
                        .WithMany()
                        .HasForeignKey("ClassSubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Term", "Term")
                        .WithMany()
                        .HasForeignKey("TermID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSubject");

                    b.Navigation("Student");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("WebApi.Models.ApplicationUser", b =>
                {
                    b.HasOne("WebApi.Models.LGA", "LGA")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("LgaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LGA");
                });

            modelBuilder.Entity("WebApi.Models.ClassSubject", b =>
                {
                    b.HasOne("WebApi.Models.ClassArm", "ClassArm")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("ClassArmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Subject", "Subject")
                        .WithMany("ClassSubject")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassArm");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("WebApi.Models.Enrollment", b =>
                {
                    b.HasOne("WebApi.Models.ClassSubject", "ClassSubject")
                        .WithMany("Enrollments")
                        .HasForeignKey("ClassSubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Term", "Term")
                        .WithMany("Enrollments")
                        .HasForeignKey("TermID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSubject");

                    b.Navigation("Student");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("WebApi.Models.LGA", b =>
                {
                    b.HasOne("WebApi.Models.State", "State")
                        .WithMany("LGAs")
                        .HasForeignKey("StateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("WebApi.Models.Option", b =>
                {
                    b.HasOne("WebApi.Models.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("WebApi.Models.PrincipalQualification", b =>
                {
                    b.HasOne("WebApi.Models.Principal", "Principal")
                        .WithMany("PrincipalQualifications")
                        .HasForeignKey("PrincipalID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Principal");
                });

            modelBuilder.Entity("WebApi.Models.QAttempt", b =>
                {
                    b.HasOne("WebApi.Models.Question", "Question")
                        .WithMany("QuestionAttempts")
                        .HasForeignKey("QuestionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.TestAttempt", "TestAttempt")
                        .WithMany("QuestionAttempts")
                        .HasForeignKey("TestAttemptID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("TestAttempt");
                });

            modelBuilder.Entity("WebApi.Models.QAttemptsOption", b =>
                {
                    b.HasOne("WebApi.Models.Option", "Option")
                        .WithMany("QAttemptsOptions")
                        .HasForeignKey("OptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.QAttempt", "QuestionAttempt")
                        .WithMany("QAttemptsOptions")
                        .HasForeignKey("QuestionAttemptID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Option");

                    b.Navigation("QuestionAttempt");
                });

            modelBuilder.Entity("WebApi.Models.Question", b =>
                {
                    b.HasOne("WebApi.Models.Test", "Test")
                        .WithMany("Questions")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("WebApi.Models.Result", b =>
                {
                    b.HasOne("WebApi.Models.Student", "Student")
                        .WithMany("Results")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Term", "Term")
                        .WithMany("Results")
                        .HasForeignKey("TermID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("WebApi.Models.ResultRecord", b =>
                {
                    b.HasOne("WebApi.Models.ClassArm", "ClassArm")
                        .WithMany("ResultRecords")
                        .HasForeignKey("ClassArmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.School", "School")
                        .WithMany("ResultRecords")
                        .HasForeignKey("SchoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Term", "Term")
                        .WithMany("ResultRecords")
                        .HasForeignKey("TermID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassArm");

                    b.Navigation("School");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("WebApi.Models.SSCompulsory", b =>
                {
                    b.HasOne("WebApi.Models.School", "School")
                        .WithMany("SSCompulsories")
                        .HasForeignKey("SchoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Subject", "Subject")
                        .WithMany("SSCompulsories")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("WebApi.Models.SSDrop", b =>
                {
                    b.HasOne("WebApi.Models.School", "School")
                        .WithMany("SSDrops")
                        .HasForeignKey("SchoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Subject", "Subject")
                        .WithMany("SSDrops")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("WebApi.Models.School", b =>
                {
                    b.HasOne("WebApi.Models.Admin", "Admin")
                        .WithMany("Schools")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.LGA", "LGA")
                        .WithMany("Schools")
                        .HasForeignKey("LgaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("LGA");
                });

            modelBuilder.Entity("WebApi.Models.TeacherQualification", b =>
                {
                    b.HasOne("WebApi.Models.Teacher", "Teacher")
                        .WithMany("TeacherQualifications")
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("WebApi.Models.TeacherSubject", b =>
                {
                    b.HasOne("WebApi.Models.ClassSubject", "ClassSubject")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("ClassSubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Teacher", "Teacher")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("TeacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSubject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("WebApi.Models.Term", b =>
                {
                    b.HasOne("WebApi.Models.School", "School")
                        .WithMany()
                        .HasForeignKey("SchoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("WebApi.Models.Test", b =>
                {
                    b.HasOne("WebApi.Models.ClassSubject", "ClassSubject")
                        .WithMany("Tests")
                        .HasForeignKey("ClassSubjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.School", "School")
                        .WithMany("Tests")
                        .HasForeignKey("SchoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Term", "Term")
                        .WithMany("Tests")
                        .HasForeignKey("TermID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassSubject");

                    b.Navigation("School");

                    b.Navigation("Term");
                });

            modelBuilder.Entity("WebApi.Models.TestAttempt", b =>
                {
                    b.HasOne("WebApi.Models.Student", "Student")
                        .WithMany("TestAttempts")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.Test", "Test")
                        .WithMany("Attempts")
                        .HasForeignKey("TestID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Test");
                });

            modelBuilder.Entity("WebApi.Models.Principal", b =>
                {
                    b.HasOne("WebApi.Models.School", "School")
                        .WithMany("Principals")
                        .HasForeignKey("SchoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("WebApi.Models.Student", b =>
                {
                    b.HasOne("WebApi.Models.ClassArm", "ClassArm")
                        .WithMany("Students")
                        .HasForeignKey("ClassArmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApi.Models.School", "School")
                        .WithMany("Students")
                        .HasForeignKey("SchoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassArm");

                    b.Navigation("School");
                });

            modelBuilder.Entity("WebApi.Models.Teacher", b =>
                {
                    b.HasOne("WebApi.Models.School", "School")
                        .WithMany("Teachers")
                        .HasForeignKey("SchoolID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("WebApi.Models.ClassArm", b =>
                {
                    b.Navigation("ClassSubjects");

                    b.Navigation("ResultRecords");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("WebApi.Models.ClassSubject", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("TeacherSubjects");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("WebApi.Models.LGA", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("Schools");
                });

            modelBuilder.Entity("WebApi.Models.Option", b =>
                {
                    b.Navigation("QAttemptsOptions");
                });

            modelBuilder.Entity("WebApi.Models.QAttempt", b =>
                {
                    b.Navigation("QAttemptsOptions");
                });

            modelBuilder.Entity("WebApi.Models.Question", b =>
                {
                    b.Navigation("Options");

                    b.Navigation("QuestionAttempts");
                });

            modelBuilder.Entity("WebApi.Models.School", b =>
                {
                    b.Navigation("Principals");

                    b.Navigation("ResultRecords");

                    b.Navigation("SSCompulsories");

                    b.Navigation("SSDrops");

                    b.Navigation("Students");

                    b.Navigation("Teachers");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("WebApi.Models.State", b =>
                {
                    b.Navigation("LGAs");
                });

            modelBuilder.Entity("WebApi.Models.Subject", b =>
                {
                    b.Navigation("ClassSubject");

                    b.Navigation("SSCompulsories");

                    b.Navigation("SSDrops");
                });

            modelBuilder.Entity("WebApi.Models.Term", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("ResultRecords");

                    b.Navigation("Results");

                    b.Navigation("Tests");
                });

            modelBuilder.Entity("WebApi.Models.Test", b =>
                {
                    b.Navigation("Attempts");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("WebApi.Models.TestAttempt", b =>
                {
                    b.Navigation("QuestionAttempts");
                });

            modelBuilder.Entity("WebApi.Models.Admin", b =>
                {
                    b.Navigation("Schools");
                });

            modelBuilder.Entity("WebApi.Models.Principal", b =>
                {
                    b.Navigation("PrincipalQualifications");
                });

            modelBuilder.Entity("WebApi.Models.Student", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Results");

                    b.Navigation("TestAttempts");
                });

            modelBuilder.Entity("WebApi.Models.Teacher", b =>
                {
                    b.Navigation("TeacherQualifications");

                    b.Navigation("TeacherSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
